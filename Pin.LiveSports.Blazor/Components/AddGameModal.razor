@inject IFakeDataBase FakeDatabase
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<dialog @ref="dialog" class="my-modal">
    <div class="my-modal-content">
        <span class="close" @onclick="CloseDialog">&times;</span>
        <h3>Add a new game</h3>
        <form @onsubmit="createGame">
            <div class="form-group">
                <label for="homeTeam">Home Team</label>
                <select class="form-control" id="homeTeam" @onchange="OnHomeTeamChanged" required>
                    @foreach (var team in teams)
                    {
                        if (team != AwayTeam)
                        {
                            <option>@team.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="awayTeam">Away Team</label>
                <select class="form-control" id="awayTeam" @onchange="OnAwayTeamchanged" required>
                    @foreach (var team in teams)
                    {
                        if (team != HomeTeam)
                        {
                            <option>@team.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="startTime">Start Time</label>
                <input type="datetime-local" id="startTime" min="@DateTime.Now" required @bind="startTime" class="form-control" />
            </div>
            <button type="button" class="cancel-btn" @onclick="CloseDialog">Cancel</button>
            <button type="submit" class="add-game-btn">Add Game</button>
        </form>
    </div>
</dialog>

@code {
	private List<Team> teams = new List<Team>();
	private Team HomeTeam;
	private Team AwayTeam;
	private DateTime startTime = DateTime.Now;

	private ElementReference dialog;

	[Parameter]
	public HubConnection hubConnection { get; set; }

	protected override void OnInitialized()
	{
		teams = FakeDatabase.GetTeams().ToList();
		HomeTeam = teams[0];
		AwayTeam = teams[1];
	}

	private async Task createGame()
	{
		var game = new Game()
			{
				Id = FakeDatabase.GetGames().Count + 1,
				HomeTeam = HomeTeam,
				AwayTeam = AwayTeam,
				StartTime = startTime,
				IsStarted = false,
				Events = new List<MatchEvent>(),
				HomeTeamScore = 0,
				AwayTeamScore = 0
			};

		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("AddGame", game);
		}
		FakeDatabase.AddGame(game);
		await CloseDialog();
	}

	private void OnHomeTeamChanged(ChangeEventArgs e)
	{
		var teamName = e.Value.ToString();
		HomeTeam = teams.FirstOrDefault(team => team.Name == teamName);
	}

	private void OnAwayTeamchanged(ChangeEventArgs e)
	{
		var teamName = e.Value.ToString();
		AwayTeam = teams.FirstOrDefault(team => team.Name == teamName);
	}

	public async Task Show()
	{
		await JSRuntime.InvokeVoidAsync("openDialog", dialog);
	}

	private async Task CloseDialog()
	{
		await JSRuntime.InvokeVoidAsync("closeDialog", dialog);
	}
}