@if (Events != null && Events.Any())
{
	<ul>
		@foreach (var matchEvent in Events)
		{
			<li class="event-notification">
				<span class="event-notification-time">@matchEvent.Time'</span>
				<span class="event-notification-icon">@GetEventIcon(matchEvent.EventType.Name)</span>
				<span class="event-notification-content">@GenerateEventString(matchEvent)</span>
			</li>
		}
	</ul>
}

@code {
	[Parameter]
	public List<MatchEvent> Events { get; set; }

	protected override void OnParametersSet()
	{
		Events.Reverse();
	}

	private string GetEventIcon(string eventType)
	{
		switch (eventType)
		{
			case "Field Goal Attempt":
			case "Field Goal Made":
				return "🏀";
			case "Three Point Attempt":
			case "Three Point Made":
				return "🏀🎯";
			case "Free Throw Attempt":
			case "Free Throw Made":
				return "🏀➡️";
			case "Foul":
				return "❌";
			case "Substitution":
				return "🔁";
			case "Timeout":
				return "⏱️";
			case "Rebound":
				return "🏀↕️";
			case "Steal":
				return "🏀🔒";
			case "Turnover":
				return "🔄";
			case "Block":
				return "🏀🚫";
			case "Start":
				return "🟢";
			case "End":
				return "🔴";
			default:
				return "🔴";
		}
	}

	private string GenerateEventString(MatchEvent matchEvent)
	{
		Player player;
		Player player2;
		switch(matchEvent.EventType.Name)
		{
			case "Field Goal Attempt":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} tried to score an easy 2-pointer but he missed";
			case "Field Goal Made":
				if (matchEvent.Players.Count() == 2)
				{
					player = matchEvent.Players.FirstOrDefault();
					player2 = matchEvent.Players.LastOrDefault();
					return $"{player.Name} of {matchEvent.Team.Name} scored an easy 2-pointer assisted by {player2.Name}";
				} else
				{
					player = matchEvent.Players.FirstOrDefault();
					return $"{player.Name} of {matchEvent.Team.Name} scored an easy 2-pointer";
				}
			case "Three Point Attempt":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} tried to score a 3-pointer but he missed";
			case "Three Point Made":
				if (matchEvent.Players.Count() == 2)
				{
					player = matchEvent.Players.FirstOrDefault();
					player2 = matchEvent.Players.LastOrDefault();
					return $"{player.Name} of {matchEvent.Team.Name} scored a 3-pointer assisted by {player2.Name}";
				} else
				{
					player = matchEvent.Players.FirstOrDefault();
					return $"{player.Name} of {matchEvent.Team.Name} scored a 3-pointer";
				}
			case "Free Throw Attempt":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} tried to score a free throw but he missed";
			case "Free Throw Made":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} scored a free throw";
			case "Foul":
				player = matchEvent.Players.FirstOrDefault();
				if (player.PersonalFouls == 6)
				{
					return $"{player.Name} of {matchEvent.Team.Name} committed his 6th fould and has fouled out";
				}
				return $"{player.Name} of {matchEvent.Team.Name} committed a foul";
			case "Substitution":
				return $"{matchEvent.Players.ToList()[0].Name} of {matchEvent.Team.Name} was substituted for {matchEvent.Players.ToList()[1].Name}";
			case "Timeout":
				return $"{matchEvent.Team.Name} called a timeout";
			case "Rebound":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} grabbed a rebound";
			case "Steal":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} made a steal";
			case "Turnover":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} committed a turnover";
			case "Block":
				player = matchEvent.Players.FirstOrDefault();
				return $"{player.Name} of {matchEvent.Team.Name} made a block";
			case "Start":
				return $"The game has begun";
			case "End":
				return $"The game has ended";
			default:
				return $"🔴 {matchEvent.EventType.Name}, {matchEvent.Team.Name}, {matchEvent.Time}";
		}
	}
}
