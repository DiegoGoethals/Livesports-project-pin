@inject IGameService GameService
@inject IMatchEventService MatchEventService
@inject IFakeDataBase FakeDataBase
@inject NavigationManager Navigation

<h3>Add Event to the game</h3>

<form @onsubmit="AddEvent">
    <div class="form-group">
        <label for="eventType">Event Type</label>
        <select class="form-control" id="eventType" @onchange="setSelectedEventType">
            @foreach (var eventType in eventTypes)
            {
                <option value="@eventType.Name">@eventType.Name</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="minute">Minute</label>
        <input type="number" class="form-control" id="minute" placeholder="Enter minute" @onchange="setMinute">
    </div>
    <div class="form-group">
        <label for="team">Team</label>
        <select class="form-control" id="team" @onchange="OnTeamSelected">
            <option value="">Select Team</option>
            <option value="@homeTeam.Name">@homeTeam.Name</option>
            <option value="@awayTeam.Name">@awayTeam.Name</option>
        </select>
    </div>
    <div class="form-group">
        <label for="player">Player</label>
        <select class="form-control" id="player" disabled="@(!teamSelected)" multiple @onchange="SetSelectedPlayers">
            @foreach (var player in selectedTeamPlayers)
            {
                <option value="@player.Name">@player.Name</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<EventList Events="game.Events.ToList()" />

@code {
    [Parameter]
    public Game game { get; set; }

    private HubConnection hubConnection { get; set; }

    ICollection<EventType> eventTypes;

    Team homeTeam;
    Team awayTeam;

    bool teamSelected = false;
    ICollection<Player> selectedTeamPlayers = new List<Player>();

    private Team selectedTeam;
    private EventType selectedEventType;
    private int selectedMinute;
    private List<Player> selectedPlayers = new List<Player>();

    protected override async Task OnInitializedAsync()
    {
        eventTypes = MatchEventService.GetEventTypes();
        selectedEventType = eventTypes.FirstOrDefault();
        homeTeam = game.HomeTeam;
        awayTeam = game.AwayTeam;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gameshub"))
            .Build();
        await hubConnection.StartAsync();
    }

    private void OnTeamSelected(ChangeEventArgs e)
    {
        string selectedTeamName = e.Value.ToString();
        if (selectedTeamName == homeTeam.Name)
        {
            selectedTeam = homeTeam;
            selectedTeamPlayers = homeTeam.Players;
        }
        else if (selectedTeamName == awayTeam.Name)
        {
            selectedTeam = awayTeam;
            selectedTeamPlayers = awayTeam.Players;
        }
        else
        {
            selectedTeamPlayers = new List<Player>();
        }
        teamSelected = true;
    }

    private void setSelectedEventType(ChangeEventArgs e)
    {
        string eventTypeName = e.Value.ToString();
        selectedEventType = eventTypes.FirstOrDefault(et => et.Name == eventTypeName);
    }

    private void setMinute(ChangeEventArgs e)
    {
        selectedMinute = int.Parse(e.Value.ToString());
    }

    private void SetSelectedPlayers(ChangeEventArgs e)
    {
        selectedPlayers.Clear();

        if (e.Value is string[] selectedPlayerNames)
        {
            foreach (var playerName in selectedPlayerNames)
            {
                selectedPlayers.Add(selectedTeam.Players.FirstOrDefault(p => p.Name == playerName.Trim()));
            }
        }
        else if (e.Value is string stringValue)
        {
            selectedPlayers.Add(selectedTeam.Players.FirstOrDefault(p => p.Name == stringValue.Trim()));
        }
    }

    private async Task AddEvent()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateGame", game);
        }
        var eventPlayers = new List<Player>(selectedPlayers);
        GameService.AddEvent(new MatchEvent
        {
            Time = selectedMinute,
            EventType = selectedEventType,
            Team = selectedTeam,
            GameId = game.Id,
            Players = eventPlayers
        });
    }
}